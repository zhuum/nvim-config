return {}

-- local lsp = require('lsp-zero')
--
-- lsp.preset('recommended')
--
-- lsp.ensure_installed({
--   'ts_ls',
--   'eslint',
--   'pyright',
--   'lua_ls',
--   'volar',
-- })
--
-- lsp.setup()
--
-- -- Reserve a space in the gutter
-- vim.opt.signcolumn = 'yes'
--
-- -- Add cmp_nvim_lsp capabilities settings to lspconfig
-- -- This should be executed before you configure any language server
-- local lspconfig_defaults = require('lspconfig').util.default_config
-- lspconfig_defaults.capabilities = vim.tbl_deep_extend(
--   'force',
--   lspconfig_defaults.capabilities,
--   require('cmp_nvim_lsp').default_capabilities()
-- )
--
-- -- This is where you enable features that only work
-- -- if there is a language server active in the file
-- vim.api.nvim_create_autocmd('LspAttach', {
--   desc = 'LSP actions',
--   callback = function(event)
--     local opts = { buffer = event.buf }
--
--     vim.keymap.set('n', 'K', '<cmd>lua vim.lsp.buf.hover()<cr>', opts)
--     vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<cr>', opts)
--     vim.keymap.set('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<cr>', opts)
--     vim.keymap.set('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<cr>', opts)
--     vim.keymap.set('n', 'go', '<cmd>lua vim.lsp.buf.type_definition()<cr>', opts)
--     vim.keymap.set('n', 'gr', '<cmd>lua vim.lsp.buf.references()<cr>', opts)
--     vim.keymap.set('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<cr>', opts)
--     vim.keymap.set('n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<cr>', opts)
--     vim.keymap.set({ 'n', 'x' }, '<F3>', '<cmd>lua vim.lsp.buf.format({async = true})<cr>', opts)
--     vim.keymap.set('n', '<F4>', '<cmd>lua vim.lsp.buf.code_action()<cr>', opts)
--     vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
--     vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
--     vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
--     vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
--   end,
-- })
--
-- previous keybinds
--    vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--    vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
--    vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
--    vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)

-- You'll find a list of language servers here:
-- https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md
-- These are example language servers.
--
-- require('lspconfig').eslint.setup({
--   on_attach = function(client, bufnr)
--     vim.api.nvim_create_autocmd("BufWritePre", {
--       buffer = bufnr,
--       command = "EslintFixAll",
--     })
--   end,
--   root_dir = require('lspconfig').util.root_pattern(".eslintrc", ".eslintrc.cjs",
--     ".eslintrc.json", "package.json"),
-- })
-- require 'lspconfig'.volar.setup {
--   filetypes = { 'typescript', 'javascript', 'javascriptreact', 'typescriptreact', 'vue', 'json' }
-- }
-- require('lspconfig').ts_ls.setup({})
-- require('lspconfig').lua_ls.setup({
--   config = function()
--     require "plugins.configs.lspconfig"
--     require "custom.configs.lspconfig"
--   end,
--   settings = {
--     Lua = {
--       diagnostics = {
--         globals = { 'vim' }
--       }
--     }
--   }
-- })
--
-- local cmp = require('cmp')
-- local cmp_select = { behavior = cmp.ConfirmBehavior.Insert }
-- cmp.setup({
--   sources = {
--     { name = 'nvim_lsp' },
--     {
--       name = "spell",
--       option = {
--         keep_all_entries = false,
--         enable_in_context = function()
--           return true
--         end,
--         preselect_correct_word = true,
--       },
--     },
--     { name = "minuet" },
--   },
--   snippet = {
--     expand = function(args)
--       vim.snippet.expand(args.body)
--     end,
--   },
--   mapping = cmp.mapping.preset.insert({
--     ['<C-k>'] = cmp.mapping.select_prev_item(cmp_select),
--     ['<C-j>'] = cmp.mapping.select_next_item(cmp_select),
--     ['<C-y>'] = cmp.mapping.confirm(
--       { select = true, behavior = cmp.ConfirmBehavior.Insert }, { "i", "c" }
--     ),
--     ['<C-Space'] = cmp.mapping.complete(),
--     ["<A-y>"] = require('minuet').make_cmp_map(),
--   }),
--   performance = {
--     fetching_timout = 2000,
--   }
-- })
--
-- local util = require('lspconfig/util')
-- local path = util.path
--
-- local function get_python_path(workspace)
--   -- Use activated virtualenv.
--   if vim.env.VIRTUAL_ENV then
--     return path.join(vim.env.VIRTUAL_ENV, 'bin', 'python')
--   end
--
--   -- Find and use virtualenv in workspace directory.
--   for _, pattern in ipairs({ '*', '.*' }) do
--     local match = vim.fn.glob(path.join(workspace, pattern, 'pyvenv.cfg'))
--     if match ~= '' then
--       return path.join(path.dirname(match), 'bin', 'python')
--     end
--   end
-- end
--
-- require("lspconfig").pyright.setup({
--   -- ...
--   before_init = function(_, config)
--     config.settings.python.pythonPath = get_python_path(config.root_dir)
--   end
-- })

-- require("lspconfig").minuet.setup({
--   provider_options = {
--     gemini = {
--       optional = {
--         generationConfig = {
--           maxOutputTokens = 256,
--         },
--         safetySettings = {
--           {
--             -- HARM_CATEGORY_HATE_SPEECH,
--             -- HARM_CATEGORY_HARASSMENT
--             -- HARM_CATEGORY_SEXUALLY_EXPLICIT
--             category = 'HARM_CATEGORY_DANGEROUS_CONTENT',
--             -- BLOCK_NONE
--             threshold = 'BLOCK_ONLY_HIGH',
--           },
--         },
--       },
--     },
--   }
-- })
-- gemini api key: AIzaSyCUeEbG277C_4X9hwW5dHrgpy5LSh8iwK4

-- how to block comment in vim
-- == === old config === == --

--local cmp = require('cmp')
--local cmp_select = { behavior = cmp.SelectBehavior.Select }
--local cmp_mappings = lsp.defaults.cmp_mappings({
--    ['<C-k>'] = cmp.mapping.select_prev_item(cmp_select),
--    ['<C-j>'] = cmp.mapping.select_next_item(cmp_select),
--    ['<C-y>'] = cmp.mapping.confirm({ select = true }),
--    ['<C-Space'] = cmp.mapping.complete(),
--})
--
--lsp.on_attach(function(client, bufnr)
--    local opts = { buffer = bufnr, remap = false }
--
--    if client.name == "eslint" then
--        vim.cmd [[ LspStop eslint ]]
--        return
--    end
--
--    vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
--    vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
--    vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--    vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
--    vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
--    vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
--    vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
--    vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
--    vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)
--    vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
--end)
--
--
--lsp.setup()
--
--require("mason").setup({
--    opts = {
--        ensure_installed = {
--            "black"
--        }
--    }
--})
--
--vim.api.nvim_create_autocmd("BufWritePre", {
--  pattern = "*",
--  callback = function(args)
--    require("conform").format({ bufnr = args.buf })
--  end,
--})

--require 'py_lsp'.setup {
--    -- This is optional, but allows to create virtual envs from nvim
--    host_python = "./venv/bin",
--    default_venv_name = "venv" -- For local venv
--}

-- don't add this function in the `LspAttach` event.
-- `format_on_save` should run only once.
--lsp.format_on_save({
--    format_opts = {
--        async = false,
--        timeout_ms = 10000,
--    },
--    servers = {
--        ['ts_ls'] = { 'javascript', 'typescript' },
--        ['pyright'] = { 'python' },
--        ['lua_ls'] = { 'lua' },
--    }
--})
